@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.Core.Helpers;

@inject INavManager NavManager;
@inject IJSRuntime JSRuntime;

<div class="top-row ps-3 navbar navbar-dark @CssClassH.TopRow">
    <div class="container-fluid">
        <a class="navbar-brand @CssClassH.NavbarBrand" href=""
            @onmouseup="@OnAnchorClick("")"
            @onclick:preventDefault="true">@Title</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <div class="@CssClassH.ShrinkEnlarge">
        <span class="oi @NavMenuEnlargerCssClass" title="expand" aria-hidden="true" @onclick="ToggleSideBarSize"></span>
    </div>
    <nav class="flex-column" id="nav-menu">
        @if (HasDefaultMenuItem)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link trmrk-default-link" href="" Match="NavLinkMatch.All"
                    @onmouseup="@OnAnchorClick("")"
                    @onclick:preventDefault="true">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
        }

        @if (MenuItems != null)
        {
            @foreach (var kvp in MenuItems.NavMenuItemsDictnr.Immtbl)
            {
                <div class="nav-item px-3">
                    <NavLink class="@GetNavLinkCssClass(kvp.Key)" href="@kvp.Value.Url"
                        @onmouseup="@OnAnchorClick(kvp.Value.Url)"
                        @onclick:preventDefault="true">
                        <span class="@kvp.Value.IconCssClass" aria-hidden="true"></span> @kvp.Value.Title
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool sideBarLarge = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? NavMenuEnlargerCssClass => sideBarLarge ? "oi-chevron-left" : "oi-chevron-right";

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> SizeChangedCallback { get; set; }

    [Parameter]
    public INavMenuItemsViewModel MenuItems { get; set; }

    [Parameter]
    public bool HasDefaultMenuItem { get; set; }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        string absoluteUri = NavManager.AbsUri.AbsoluteUri;

        string relUriWithoutQueryString = absoluteUri.GetRelUriWithoutQueryString(true);
        string activeTargetSelector = ".trmrk-default-link";

        if (!string.IsNullOrWhiteSpace(relUriWithoutQueryString))
        {
            activeTargetSelector = $".trmrk-link-{relUriWithoutQueryString}";
        }

        await JSRuntime.InvokeVoidAsync(
            JsH.Get(JsH.AddCssClass),
            "nav-menu",
            activeTargetSelector,
            "active",
            ".nav-link");
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleSideBarSize()
    {
        SizeChangedCallback.InvokeAsync();
        sideBarLarge = !sideBarLarge;
    }

    private Action<MouseEventArgs> OnAnchorClick(string url)
    {
        Action<MouseEventArgs> action = arg =>
        {
            NavManager.NavigateTo(url, false);
        };

        return action;
    }

    private string GetNavLinkCssClass(string key)
    {
        string cssClass = $"nav-link trmrk-link-{key}";
        return cssClass;
    }
}
