@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services

@inject INavManager NavManager;
@inject IJSRuntime JSRuntime;

<div class="top-row ps-3 navbar navbar-dark @CssClassH.TopRow">
    <div class="container-fluid">
        <a class="navbar-brand @CssClassH.NavbarBrand" href="">@Title</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <div class="@CssClassH.ShrinkEnlarge">
        <span class="oi @NavMenuEnlargerCssClass" title="expand" aria-hidden="true" @onclick="ToggleSideBarSize"></span>
    </div>
    <nav class="flex-column">
        @if (HasDefaultMenuItem)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link trmrk-default-link" href="" Match="NavLinkMatch.All"
                    @onmouseup="@OnAnchorClick("")"
                    @onclick:preventDefault="true">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </div>
        }

        @foreach (var kvp in MenuItems)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@kvp.Key"
                    @onmouseup="@OnAnchorClick(kvp.Key)"
                    @onclick:preventDefault="true">
                    <span class="oi oi-browser" aria-hidden="true"></span> @kvp.Value
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool sideBarLarge = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private string? NavMenuEnlargerCssClass => sideBarLarge ? "oi-chevron-left" : "oi-chevron-right";

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> SizeChangedCallback { get; set; }

    [Parameter]
    public Dictionary<string, string> MenuItems { get; set; }

    [Parameter]
    public bool HasDefaultMenuItem { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void ToggleSideBarSize()
    {
        SizeChangedCallback.InvokeAsync();
        sideBarLarge = !sideBarLarge;
    }

    private Action<MouseEventArgs> OnAnchorClick(string url)
    {
        Action<MouseEventArgs> action = arg =>
        {
            JSRuntime.InvokeVoidAsync(
                JsH.Get(JsH.RemoveCssClass),
                null,
                CssClassH.CssClsSel(
                    CssClassH.DefaultLink),
                "active");

            NavManager.NavigateTo(url, false);
        };

        return action;
    }
}
