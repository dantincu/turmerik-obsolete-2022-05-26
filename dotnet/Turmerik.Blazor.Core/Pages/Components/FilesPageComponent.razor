@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Collections
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.AspNetCore.Services.DriveItems
@using Turmerik.AspNetCore.Services.LocalSessionStorage
@using Turmerik.AspNetCore.Settings
@using Turmerik.Blazor.Core.Pages.Components
@using Turmerik.Core.Cloneable
@using Turmerik.Core.Components
@using Turmerik.Core.Services.DriveItems

@inherits FilesPageComponentBase

@inject ICloneableMapper mapper;
@inject INavManager navManager;
@inject ILocalStorageWrapper localStorage;
@inject ISessionStorageWrapper sessionStorage;
@inject IDriveExplorerService driveFolderService;
@inject ITrmrkAppSettings appSettings;
@inject IJSRuntime jsRuntime;
@inject IMainLayoutService mainLayoutService;
@inject ITimeStampHelper timeStampH;
@inject ILocalDiskExplorerBackgroundApiMainRelUriRetriever localDiskExplorerBackgroundApiMainRelUriRetriever;

<div class="@CssClassH.Container">
    @if (ServiceArgs != null)
    {
        var tabPageItems = ServiceArgs.Data.TabPageItems;
        var currentlyOpenFolder = tabPageItems.CurrentlyOpenFolder;

        var currentlyOpenIdentifier = ServiceArgs.FolderIdentifier;
        bool isRootFolder = true;

        if (currentlyOpenFolder != null)
        {
            isRootFolder = currentlyOpenFolder.IsRootFolder ?? false;
        }

        <AddressBar
            AddressStrValue=@ServiceArgs.FolderIdentifier.Address
            IsEditingAddress=IsEditingAddressBar
            IsEditingEnabled="true"
            IsEnabled=IsNavigationEnabled
            OnGoBackClick=OnAddressBarGoBackClick
            OnGoUpClick=OnAddressBarGoUpClick
            OnGoForwardClick=OnAddressBarGoForwardClick
            OnOptionsClick=OnCurrentlyOpenDriveFolderOptionsClick
            OnReloadClick=OnAddressBarReloadClick
            OnSubmitAddress=OnSubmitAddress
            AddressGoBackBtnDisabled=@(!tabPageItems.GoBackButtonEnabled)
            AddressGoForwardBtnDisabled=@(!tabPageItems.GoForwardButtonEnabled)
            AddressGoParentBtnDisabled=@(!tabPageItems.GoUpButtonEnabled)
            OptionsBtnDisabled=@(ErrorViewModel != null)></AddressBar>

        <div class="@CssClassH.Spacer"></div>

        <label class="@CssClassH.Title">
            @currentlyOpenFolder?.Name
        </label>

        <TabView
            IsNavigationEnabled=IsNavigationEnabled
            PageItem=currentlyOpenFolder
            TabHeaderViewState=@tabPageItems.Header
            Error=ErrorViewModel
            OnTabPageHeadClick=OnTabPageHeadClickAsync
            OnNewTabPageClick=OnNewTabPageClickAsync
            OnCloseTabPageClick=OnCloseTabPageClickAsync>
            <PageTemplate>
                <div class="@CssClassH.DriveTabViewPage">
                    <h6>Folders</h6>

                    <DriveItemsGrid
                        IsNavigationEnabled=IsNavigationEnabled
                        DriveItemType=DriveItem
                        DriveItems=context.FolderItems
                        TableCssClass="@CssClassH.DriveFoldersGrid"
                        IconCssClass="oi-folder"
                        OnDriveItemClick=OnDriveFolderClickAsync
                        OnDriveItemOptionsClick=OnDriveFolderOptionsClick>
                            <SpecificRowColumns Context="ctx">

                            </SpecificRowColumns>
                            <SpecificRowCells Context="dvFolder">

                            </SpecificRowCells>
                    </DriveItemsGrid>

                    <h6>Files</h6>

                    <DriveItemsGrid
                        IsNavigationEnabled=IsNavigationEnabled
                        DriveItemType=DriveItem
                        DriveItems=@context.FileItems
                        TableCssClass="@CssClassH.DriveItemsGrid"
                        IconCssClass="oi-file"
                        OnDriveItemClick="OnDriveItemClickAsync"
                        OnDriveItemOptionsClick=OnDriveItemOptionsClick>
                            <SpecificRowColumns Context="ctx">
                                <th class="@CssClassH.ColExt">Ext</th>
                            </SpecificRowColumns>
                            <SpecificRowCells Context="dvFile">
                                @{
                                    string extension = Path.GetExtension(dvFile.Name);
                                }

                                <td>@extension</td>
                            </SpecificRowCells>
                    </DriveItemsGrid>
                </div>
            </PageTemplate>
        </TabView>

        <DriveItemOptionsModal
            ModalId="@ModalIds.CURRENTLY_OPEN_DRIVE_FOLDER_OPTIONS"
            OnCloseModalAsync=OnCurrentlyOpenDriveFolderItemOptionsModalClosedAsync
            DriveItemName="@currentlyOpenFolder?.Name"
            AllowDriveItemNameToClipboard="@(!isRootFolder)"
            DriveItemAddress="@currentlyOpenIdentifier?.Address"
            ShowDriveItemAddress="@(!isRootFolder)"
            DriveItemUri="@currentlyOpenIdentifier?.Uri"
            ShowDriveItemUri="@(!isRootFolder)"
            DriveItemId="@currentlyOpenFolder?.Id"
            CommandsMx=CurrentlyOpenDriveFolderCommandsMx>
        </DriveItemOptionsModal>

        <DriveItemOptionsModal
            ModalId="@ModalIds.DRIVE_FOLDER_OPTIONS"
            OnCloseModalAsync=OnDriveFolderItemOptionsModalClosedAsync
            DriveItemName="@SelectedDriveFolderName"
            DriveItemAddress="@SelectedDriveFolderAddress"
            DriveItemUri="@SelectedDriveFolderUri"
            DriveItemId="@SelectedDriveFolderId"
            AllowAllToClipboard="true"
            CommandsMx=SelectedDriveFolderCommandsMx>
        </DriveItemOptionsModal>

        <DriveItemOptionsModal
            ModalId="@ModalIds.DRIVE_ITEM_OPTIONS"
            OnCloseModalAsync=OnDriveItemOptionsModalClosedAsync
            DriveItemName="@SelectedDriveItemName"
            DriveItemAddress="@SelectedDriveItemAddress"
            DriveItemUri="@SelectedDriveItemUri"
            DriveItemId="@SelectedDriveItemId"
            AllowAllToClipboard="true"
            CommandsMx=SelectedDriveItemCommandsMx>
        </DriveItemOptionsModal>
    }
    else
    {
        <h6>LOADING...</h6>
    }

    <ApiCallComponent @ref="OpenFolderInOSFileExplorerApiCall"
        DataType="bool"
        ApiKey="@TrmrkJsH.Api.Background.LocalDiskExplorer.API_KEY"
        ApiRelUri="@localDiskExplorerBackgroundApiMainRelUriRetriever.OpenFolderInOSFileExplorer.Value">
    </ApiCallComponent>

    <ApiCallComponent @ref="OpenFolderInTrmrkFileExplorerApiCall"
        DataType="bool"
        ApiKey="@TrmrkJsH.Api.Background.LocalDiskExplorer.API_KEY"
        ApiRelUri="@localDiskExplorerBackgroundApiMainRelUriRetriever.OpenFolderInTrmrkFileExplorer.Value">
    </ApiCallComponent>

    <ApiCallComponent @ref="OpenFileInOSDefaultAppApiCall"
        DataType="bool"
        ApiKey="@TrmrkJsH.Api.Background.LocalDiskExplorer.API_KEY"
        ApiRelUri="@localDiskExplorerBackgroundApiMainRelUriRetriever.OpenFileInOSDefaultApp.Value">
    </ApiCallComponent>

    <ApiCallComponent @ref="OpenFileInOSDefaultTextEditorApiCall"
        DataType="bool"
        ApiKey="@TrmrkJsH.Api.Background.LocalDiskExplorer.API_KEY"
        ApiRelUri="@localDiskExplorerBackgroundApiMainRelUriRetriever.OpenFileInOSDefaultTextEditor.Value">
    </ApiCallComponent>

    <ApiCallComponent @ref="OpenFileInTrmrkTextEditorApiCall"
        DataType="bool"
        ApiKey="@TrmrkJsH.Api.Background.LocalDiskExplorer.API_KEY"
        ApiRelUri="@localDiskExplorerBackgroundApiMainRelUriRetriever.OpenFileInOSTrmrkTextEditor.Value">
    </ApiCallComponent>
</div>

@code {
    protected async Task OnCurrentlyOpenDriveFolderOptionsClick(MouseEventArgs args)
    {
        await OnCurrentlyOpenDriveFolderOptionsClickAsync();
    }

    protected async Task OnDriveFolderOptionsClick(DriveItem driveFolder)
    {
        await OnDriveFolderOptionsClickAsync(driveFolder);
    }

    protected async Task OnDriveItemOptionsClick(DriveItem driveItem)
    {
        await OnDriveItemOptionsClickAsync(driveItem);
    }

    protected async Task OnCurrentlyOpenDriveFolderItemOptionsModalClosedAsync()
    {
        CurrentlyOpenDriveFolderOptionsModelIsOpen = false;
    }

    protected async Task OnDriveFolderItemOptionsModalClosedAsync()
    {
        DriveFolderItemOptionsModelIsOpen = false;
    }

    protected async Task OnDriveItemOptionsModalClosedAsync()
    {
        DriveItemOptionsModelIsOpen = false;
    }

    protected async Task OnAddressEditing(bool isAddressEditing)
    {

    }

    protected override async Task OnInitializedAsync()
    {
        Mapper = mapper;
        NavManager = navManager;

        LocalStorage = localStorage;
        SessionStorage = sessionStorage;

        DriveFolderService = driveFolderService;
        AppSettings = appSettings;

        JSRuntime = jsRuntime;
        MainLayoutService = mainLayoutService;

        LocalDiskExplorerBackgroundApiMainRelUriRetriever = localDiskExplorerBackgroundApiMainRelUriRetriever;
        await base.OnInitializedAsync();
    }
}
