@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Collections
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.AspNetCore.Services.DriveItems
@using Turmerik.AspNetCore.Services.LocalSessionStorage
@using Turmerik.AspNetCore.Settings
@using Turmerik.Blazor.Core.Pages.Components
@using Turmerik.Core.Cloneable
@using Turmerik.Core.Components
@using Turmerik.Core.Services.DriveItems

@inherits FilesPageComponentBase

@inject ICloneableMapper mapper;
@inject INavManager navManager;
@inject ILocalStorageWrapper localStorage;
@inject ISessionStorageWrapper sessionStorage;
@inject IDriveExplorerService driveFolderService;
@inject IJSRuntime jsRuntime;
@inject ITrmrkAppSettings appSettings;
@inject ITimeStampHelper timeStampH;

<div class="@CssClassH.Container">
    @if (ServiceArgs != null)
    {
        var tabPageItems = ServiceArgs.Data.TabPageItems;

        <AddressBar
            InitialAddressStrValue=@ServiceArgs.FolderIdentifier.Address
            OnGoBackClick=@OnAddressBarGoBackClick
            OnGoUpClick=@OnAddressBarGoUpClick
            OnGoForwardClick=@OnAddressBarGoForwardClick
            OnOptionsClick=@OnCurrentlyOpenDriveFolderOptionsClick
            OnReloadClick=@OnAddressBarReloadClick
            OnSubmitAddress=@OnSubmitAddress
            AddressGoBackBtnDisabled=@(!tabPageItems.GoBackButtonEnabled)
            AddressGoForwardBtnDisabled=@(!tabPageItems.GoForwardButtonEnabled)
            AddressGoParentBtnDisabled=@(!tabPageItems.GoUpButtonEnabled)></AddressBar>

        <div class="@CssClassH.Spacer"></div>

        <label class="@CssClassH.Title">@ServiceArgs.Data.TabPageItems.CurrentlyOpenFolder?.Name</label>

        <TabView
            PageItem=tabPageItems.CurrentlyOpenFolder
            TabHeaderViewState=@tabPageItems.Header
            Error=ErrorViewModel
            OnTabPageHeadClick=@OnTabPageHeadClickAsync
            OnNewTabPageClick=@OnNewTabPageClickAsync
            OnCloseTabPageClick=@OnCloseTabPageClickAsync>
            <PageTemplate>
                <div class="@CssClassH.DriveTabViewPage">
                    <h6>
                        Folders
                        <span class="oi oi-caret-bottom @CollapseFoldersGridBtnCssClass" aria-hidden="true" @onmouseup=@OnCollapseFoldersGridClickAsync></span>
                        <span class="oi oi-caret-right @ExpandFoldersGridBtnCssClass" aria-hidden="true" @onmouseup=@OnExpandFoldersGridClickAsync></span>
                    </h6>

                    @if (!FoldersGridCollapsed)
                    {
                        <DriveItemsGrid
                            DriveItemType=DriveItem
                            DriveItems=tabPageItems.CurrentlyOpenFolder.FolderItems
                            TableCssClass="@CssClassH.DriveFoldersGrid"
                            IconCssClass="oi-folder"
                            OnDriveItemClick="@OnDriveFolderClickAsync"
                            OnDriveItemOptionsClick=@OnDriveFolderOptionsClick>
                                <SpecificRowColumns Context="ctx">

                                </SpecificRowColumns>
                                <SpecificRowCells Context="dvFolder">

                                </SpecificRowCells>
                        </DriveItemsGrid>
                    }

                    <h6>
                        Files
                        <span class="oi oi-caret-bottom @CollapseFilesGridBtnCssClass" aria-hidden="true" @onmouseup=@OnCollapseFilesGridClickAsync></span>
                        <span class="oi oi-caret-right @ExpandFilesGridBtnCssClass" aria-hidden="true" @onmouseup=@OnExpandFilesGridClickAsync></span>
                    </h6>

                    @if (!FilesGridCollapsed)
                    {
                        <DriveItemsGrid
                            DriveItemType=DriveItem
                            DriveItems=@tabPageItems.CurrentlyOpenFolder.FileItems
                            TableCssClass="@CssClassH.DriveItemsGrid"
                            IconCssClass="oi-file"
                            OnDriveItemClick="@OnDriveItemClickAsync"
                            OnDriveItemOptionsClick=@OnDriveItemOptionsClick>
                                <SpecificRowColumns Context="ctx">
                                    <th class="@CssClassH.ColExt">Ext</th>
                                </SpecificRowColumns>
                                <SpecificRowCells Context="dvFile">
                                @{
                                    string extension = Path.GetExtension(dvFile.Name);
                                }
                                    <td>@extension</td>
                                </SpecificRowCells>
                        </DriveItemsGrid>
                    }
                </div>
            </PageTemplate>
        </TabView>

        <SimpleModal
            ModalId="currently-open-folder-options-modal">
            <HeaderTemplate>
                <h5 class="modal-title">@tabPageItems?.CurrentlyOpenFolder?.Name</h5>
            </HeaderTemplate>
            <BodyTemplate>
                <pre>@tabPageItems?.CurrentlyOpenFolder?.Id</pre>
                <button type="button" class="btn btn-dark">
                    Open folder in Windows Explorer
                </button>
            </BodyTemplate>
        </SimpleModal>

        <SimpleModal
            ModalId="drive-folder-options-modal">
            <HeaderTemplate>
                <h5 class="modal-title">@SelectedDriveFolderName</h5>
            </HeaderTemplate>
            <BodyTemplate>
                <pre>@SelectedDriveFolderId</pre>
                <button type="button" class="btn btn-dark">
                    Open folder in Windows Explorer
                </button>
            </BodyTemplate>
        </SimpleModal>

        <SimpleModal
            ModalId="drive-item-options-modal">
            <HeaderTemplate>
                <h5 class="modal-title">@SelectedDriveItemName</h5>
            </HeaderTemplate>
            <BodyTemplate>
                <pre>@SelectedDriveItemId</pre>
                <button type="button" class="btn btn-dark">
                    Open folder in Windows Explorer
                </button>
            </BodyTemplate>
        </SimpleModal>
    }
    else
    {
        <h6>LOADING...</h6>
    }
</div>

@code {
    [Parameter]
    public bool IsLocalDiskExplorer { get; set; }

    protected async Task OnCurrentlyOpenDriveFolderOptionsClick(MouseEventArgs args)
    {
        await OnCurrentlyOpenDriveFolderOptionsClickAsync();
    }

    protected async Task OnDriveFolderOptionsClick(DriveItem driveFolder)
    {
        await OnDriveFolderOptionsClickAsync(driveFolder);
    }

    protected async Task OnDriveItemOptionsClick(DriveItem driveItem)
    {
        await OnDriveItemOptionsClickAsync(driveItem);
    }

    protected async Task OnExpandFoldersGridClickAsync(MouseEventArgs args)
    {
        FoldersGridCollapsed = false;
        StateHasChanged();
    }

    protected async Task OnCollapseFoldersGridClickAsync(MouseEventArgs args)
    {
        FoldersGridCollapsed = true;
        StateHasChanged();
    }

    protected async Task OnExpandFilesGridClickAsync(MouseEventArgs args)
    {
        FilesGridCollapsed = false;
        StateHasChanged();
    }

    protected async Task OnCollapseFilesGridClickAsync(MouseEventArgs args)
    {
        FilesGridCollapsed = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Mapper = mapper;
        NavManager = navManager;

        LocalStorage = localStorage;
        SessionStorage = sessionStorage;

        DriveFolderService = driveFolderService;
        AppSettings = appSettings;

        JSRuntime = jsRuntime;
        await base.OnInitializedAsync();
    }
}
