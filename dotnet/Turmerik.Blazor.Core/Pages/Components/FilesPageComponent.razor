@using Blazored.LocalStorage
@using Blazored.SessionStorage
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.AspNetCore.Services.DriveItems
@using Turmerik.AspNetCore.Services.LocalSessionStorage
@using Turmerik.AspNetCore.Settings
@using Turmerik.Blazor.Core.Pages.Components
@using Turmerik.Core.Cloneable
@using Turmerik.Core.Components
@using Turmerik.Core.Services.DriveItems

@inherits FilesPageComponentBase

@inject ICloneableMapper mapper;
@inject INavManager navManager;
@inject ILocalStorageWrapper localStorage;
@inject ISessionStorageWrapper sessionStorage;
@inject IDriveFolderService driveFolderService;
@inject IJSRuntime jsRuntime;
@inject ITrmrkAppSettings appSettings;
@inject ITimeStampHelper timeStampH;

<div class="@CssClassH.Container">
    <AddressBar
        OnGoBackClick=@OnAddressBarGoBackClick
        OnGoUpClick=@OnAddressBarGoUpClick
        OnGoForwardClick=@OnAddressBarGoForwardClick
        OnReloadClick=@OnAddressBarReloadClick
        OnSubmitAddress=@OnSubmitAddress></AddressBar>

    <div class="@CssClassH.Spacer"></div>

    <TabView
        PageItem=TabPageViewModel
        PageHeadsList=@TabPageHeadsList
        Error=ErrorViewModel>
        <PageTemplate>
            <div class="@CssClassH.DriveTabViewPage">
                <h6>Folders</h6>

                <table class="table table-sm table-dark table-hover @CssClassH.Table @CssClassH.DriveFoldersGrid"
                    data-trmrk-ref-date-time="@FormatDateTimeExact(Now)">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th class="@CssClassH.ColName">Name</th>
                            <th class="@CssClassH.Options" title="Options"></th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Accessed</th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Written</th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subFolder in TabViewPageDriveFolders)
                        {
                            <tr>
                                <th scope="row"><span class="oi oi-folder" aria-hidden="true"></span></th>
                                <td title="@subFolder.DisplayName">@subFolder.Name</td>
                                <td title="Options">
                                    <i class="oi oi-ellipses trmrk-rotate90deg"></i>
                                </td>
                                @foreach (var dt in new DateTime[]
                                 {
                                     subFolder.LastAccessTime,
                                     subFolder.LastWriteTime,
                                     subFolder.CreationTime
                                 })
                                {
                                    string ts = FormatDateTimeExact(dt);
                                    <td title="@ts" data-trmrk-date-time="@ts">@ts</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>

                <h6>Files</h6>

                <table class="table table-sm table-dark table-hover @CssClassH.Table @CssClassH.DriveItemsGrid"
                    data-trmrk-ref-date-time="@FormatDateTimeExact(Now)">
                    <thead>
                        <tr>
                            <th scope="col"></th>
                            <th class="@CssClassH.ColName">Name</th>
                            <th class="@CssClassH.ColExt">Ext</th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Accessed</th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Written</th>
                            <th data-trmrk-date-time="" class=@CssClassH.ColDateTime>Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var subFolder in TabViewPageDriveItems)
                        {
                            <tr>
                                <th scope="row"><span class="oi oi-file" aria-hidden="true"></span></th>
                                <td title="@subFolder.Name">@subFolder.Name</td>
                                <td title="@subFolder.Extension">@subFolder.Extension</td>
                                @foreach (var dt in new DateTime[]
                                 {
                                     subFolder.LastAccessTime,
                                     subFolder.LastWriteTime,
                                     subFolder.CreationTime
                                 })
                                {
                                    string ts = FormatDateTimeExact(dt);
                                    <td title="@ts" data-trmrk-date-time="@ts">@ts</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </PageTemplate>
    </TabView>
</div>

@code {
    private DateTime Now { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        Mapper = mapper;
        NavManager = navManager;

        LocalStorage = localStorage;
        SessionStorage = sessionStorage;

        DriveFolderService = driveFolderService;
        AppSettings = appSettings;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await jsRuntime.InvokeVoidAsync(
            JsH.Get(JsH.InitDateTimeUserFriendlyLabels),
            this.UuidStr);
    }

    private string FormatDateTimeExact(DateTime value)
    {
        string strVal;

        if (value > DateTime.MinValue)
        {
            strVal = timeStampH.TmStmp(value, true, TimeStamp.Seconds);
        }
        else
        {
            strVal = string.Empty;
        }

        return strVal;
    }
}
