@using Turmerik.Blazor.Core.Pages.Components
@using Turmerik.AspNetCore.Infrastructure;
@using Microsoft.AspNetCore.Components.Web
@using Turmerik.Core.Components
@using Turmerik.Core.Helpers;
@using Turmerik.Core.Services
@using Turmerik.Core.Services.DriveItems;

@inherits ComponentCoreBase

@typeparam PageComponentType

<div class="@CssClassH.TabView">
    @if (TabHeaderViewState?.TabPageHeads != null)
    {
        int count = TabHeaderViewState.TabPageHeads.Count;

        <div class="@CssClassH.TabViewHeader" role="group">
            @for (int i = 0; i < count; i++)
            {
                var tabPageHead = TabHeaderViewState.TabPageHeads[i];

                <div class="@GetTabPageHeadCssClass(tabPageHead)" disabled=@(!IsNavigationEnabled)>
                    <span class="@CssClassH.Name" @onmouseup=@OnTabPageHeadClickEventHandler(i)>@tabPageHead.Name</span>
                    <span class="@CssClassH.Icon" @onmouseup=@OnCloseTabPageClickEventHandler(i)>&times;</span>
                </div>
            }

            <span class="@CssClassH.Icon" @onmouseup=@OnNewTabPageClick disabled=@(!IsNavigationEnabled)>+</span>
        </div>
        
        <div class="@CssClassH.TabPage">
            @if(Error == null && PageTemplate != null && PageItem != null)
            {
                @PageTemplate(PageItem)
            }
            else if (Error != null)
            {
                <ErrorView
                    ViewModel="@Error"
                    ViewSize="@ErrorViewSize.Large" />
            }
            else
            {
                <div class="@CssClassH.ErrorBlockLarge">
                    <p>Oops... An error has occurred</p>
                </div>
            }
        </div>
    }
    else if (Error != null)
    {
        <ErrorView
            ViewModel="@Error"
            ViewSize="@ErrorViewSize.Large" />
    }
    else
    {
        <div class="@CssClassH.Loading">LOADING...</div>
    }
    
</div>

@code {
    [Parameter]
    public bool IsNavigationEnabled { get; set; }

    [Parameter]
    public RenderFragment<PageComponentType> PageTemplate { get; set; }

    [Parameter]
    public PageComponentType PageItem { get; set; }

    [Parameter]
    public TabHeaderViewState TabHeaderViewState { get; set; }

    [Parameter]
    public ErrorViewModel Error { get; set; }

    [Parameter]
    public Func<IntEventArgsWrapper, Task> OnTabPageHeadClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnNewTabPageClick { get; set; }

    [Parameter]
    public Func<IntEventArgsWrapper, Task> OnCloseTabPageClick { get; set; }

    protected string GetTabPageHeadCssClass(
        TabPageHead tabPageHead)
    {
        var cssClassList = new List<string>
        {
            CssClassH.TabPageHead
        };

        if (tabPageHead.IsCurrent == true)
        {
            cssClassList.Add(CssClassH.Current);
        }

        string cssClasses = string.Join(' ', cssClassList);
        return cssClasses;
    }

    protected Func<MouseEventArgs, Task> OnCloseTabPageClickEventHandler(int idx)
    {
        Func<MouseEventArgs, Task> eventHandler = async args =>
        {
            var eventArgs = new IntEventArgsWrapper(args, idx);
            await OnCloseTabPageClick.InvokeAsyncIfReq(eventArgs);
        };

        return eventHandler;
    }

    protected Func<MouseEventArgs, Task> OnTabPageHeadClickEventHandler(int idx)
    {
        Func<MouseEventArgs, Task> eventHandler = async args =>
        {
            var eventArgs = new IntEventArgsWrapper(args, idx);
            await OnTabPageHeadClick.InvokeAsyncIfReq(eventArgs);
        };

        return eventHandler;
    }
}
