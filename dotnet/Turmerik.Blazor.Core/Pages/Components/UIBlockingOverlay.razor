@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.Core.Components
@using Microsoft.AspNetCore.Components.Web

@inject IMainLayoutService mainLayoutService;

<div id="@DomIds.UI_BLOCKING_OVERLAY_CONTAINER" class="@OverlayCssClass">
    <div id="@DomIds.UI_BLOCKING_OVERLAY">
        @if (ViewModel.Error != null)
        {
            <ErrorView ViewModel=@ViewModel.Error ViewSize=@ErrorViewSize.Large></ErrorView>
        }
        else if (ViewModel.SetApiBaseUri != null)
        {
            <SetApiBaseUriView ViewModel=@ViewModel.SetApiBaseUri></SetApiBaseUriView>
        }

        @if (ViewModel.ShowBackBtn && ViewModel.Error != null || ViewModel.SetApiBaseUri != null)
        {
            <button type="button" class="btn btn-dark" @onmouseup=@OnBtnBackClickAsync>Back</button>
        }
    </div>
</div>

@code {
    private UIBlockingOverlayViewModel ViewModel => mainLayoutService.UIBlockingOverlayViewModel;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        mainLayoutService.OnUIBlockingOverlayChanged += OnUIBlockingOverlayChanged;
    }

    private string OverlayCssClass
    {
        get
        {
            string cssClass = string.Empty;

            if (!ViewModel.Enabled)
            {
                cssClass = @CssClassH.Hidden;
            }
            else if ((
                ViewModel.Error != null) || (
                ViewModel.SetApiBaseUri != null))
            {
                cssClass = CssClassH.Opaque;
            }

            return cssClass;
        }
    }

    private void OnUIBlockingOverlayChanged()
    {
        StateHasChanged();
    }

    private async Task OnBtnBackClickAsync()
    {
        ViewModel.Enabled = false;
        StateHasChanged();
    }
}
