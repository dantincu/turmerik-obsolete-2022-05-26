@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using System.Web;
@using Turmerik.Core.Helpers;

@inherits ComponentCoreBase;
@inject IJSRuntime JSRuntime;

<div id="@UuidStr" class="@CssClassH.AddressBarContainer">
    <IconButton IsDisabled=@AddressGoBackBtnDisabled CssClass="oi oi-arrow-circle-left" Title="Go Back" OnMouseUp=@OnGoBackMouseUpAsyncEventHandler></IconButton>
    <IconButton IsDisabled=@AddressGoParentBtnDisabled CssClass="oi oi-arrow-circle-top" Title="Go Up" OnMouseUp=@OnGoUpMouseUpAsyncEventHandler></IconButton>

    <IconButton IsDisabled=@AddressGoForwardBtnDisabled CssClass="oi oi-arrow-circle-right" Title="Go Forward" OnMouseUp=@OnGoForwardMouseUpAsyncEventHandler></IconButton>

    <TrmrkTextBox
        ComponentCssClass="@CssClassH.AddressBarWrapper"
        TextValue="@AddressStrValue"
        OnCancelTextBox=OnCancelAddress
        OnSubmitTextBox=OnSubmitAddress>
    </TrmrkTextBox>

    <IconButton IsDisabled=@OptionsBtnDisabled CssClass="oi oi-ellipses trmrk-rotate90deg" Title="Options" OnMouseUp=@OnOptionsMouseUpAsyncEventHandler></IconButton>
    
    <IconButton CssClass="oi oi-arrow-circle-right" Title="Go to address" OnMouseUp=@OnGoToAddressMouseUpAsyncEventHandler></IconButton>
    <IconButton CssClass="oi oi-reload" Title="Reload" OnMouseUp=@OnReloadMouseUpAsyncEventHandler></IconButton>
</div>

@code {
    [Parameter]
    public string AddressStrValue { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoBackClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoUpClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoForwardClick { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnSubmitAddress { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnCancelAddress { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnOptionsClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnReloadClick { get; set; }

    [Parameter]
    public bool AddressGoBackBtnDisabled { get; set; }

    [Parameter]
    public bool AddressGoParentBtnDisabled { get; set; }

    [Parameter]
    public bool AddressGoForwardBtnDisabled { get; set; }

    [Parameter]
    public bool OptionsBtnDisabled { get; set; }

    protected bool IsEditable { get; set; }

    protected async Task OnGoBackMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoBackClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnGoUpMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoUpClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnGoForwardMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoForwardClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnOptionsMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (!OptionsBtnDisabled)
        {
            await OnOptionsClick.InvokeMouseClickAsyncIfLeftBtn(args);
        }
    }

    protected async Task OnGoToAddressMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton())
        {
            var textArgs = new TextEventArgsWrapper(args, AddressStrValue);
            await OnSubmitAddress(textArgs);
        }
    }

    protected async Task OnReloadMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnReloadClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }
}
