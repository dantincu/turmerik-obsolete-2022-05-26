@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using System.Web;
@using Turmerik.Core.Helpers;

@inherits ComponentCoreBase;
@inject IJSRuntime JSRuntime;

<div id="@UuidStr" class="@CssClassH.AddressBarContainer">
    <IconButton CssClass="oi oi-arrow-circle-left" Title="Go Back" OnMouseUp=@OnGoBackMouseUpAsyncEventHandler></IconButton>
    <IconButton CssClass="oi oi-arrow-circle-top" Title="Go Up" OnMouseUp=@OnGoUpMouseUpAsyncEventHandler></IconButton>

    <IconButton CssClass="oi oi-arrow-circle-right" Title="Go Forward" OnMouseUp=@OnGoForwardMouseUpAsyncEventHandler></IconButton>
    <input type="text" value="@InitialAddressStrValue" class="@CssClassH.AddressBar @CssClassH.Hidden" @onfocus=@OnAddressBarFocusAsync @onkeydown=@OnAddressBarKeyDownAsyncEventHandler />
    <input type="text" readonly value="@InitialAddressStrValue" class="@CssClassH.AddressBarReadonly" @onclick=@OnAddressBarReadonlyClickAsyncEventHandler></input>
    
    <IconButton CssClass="oi oi-arrow-circle-right" Title="Go to address" OnMouseUp=@OnGoToAddressMouseUpAsyncEventHandler></IconButton>
    <IconButton CssClass="oi oi-reload" Title="Reload" OnMouseUp=@OnReloadMouseUpAsyncEventHandler></IconButton>
</div>

@code {
    [Parameter]
    public string InitialAddressStrValue { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoBackClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoUpClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoForwardClick { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnSubmitAddress { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnReloadClick { get; set; }

    protected string AddressStrValue { get; set; }

    protected async Task OnAddressBarFocusAsync(FocusEventArgs args)
    {
        AddressStrValue = await JSRuntime.InvokeAsync<string>(
            JsH.Get(JsH.SelectDomEl),
            UuidStr,
            CssClassH.AddressBar.CssClsSel());
    }

    protected async Task OnAddressBarKeyDownAsyncEventHandler(KeyboardEventArgs args)
    {
        if (args.Code.KeyCodeIsEnter())
        {
            await SubmitAddress(args);
        }
    }

    protected async Task OnGoBackMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoBackClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnGoUpMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoUpClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnGoForwardMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnGoForwardClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnGoToAddressMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton())
        {
            await SubmitAddress(args);
        }
    }

    protected async Task OnReloadMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        await OnReloadClick.InvokeMouseClickAsyncIfLeftBtn(args);
    }

    protected async Task OnAddressBarReadonlyClickAsyncEventHandler(MouseEventArgs args)
    {
        await SetEditable(true);
    }

    protected async Task<string> RefreshAddressStrValue()
    {
        AddressStrValue = await JSRuntime.InvokeAsync<string>(
            JsH.Get(JsH.GetDomElValue),
            UuidStr,
            CssClassH.AddressBar.CssClsSel());

        return AddressStrValue;
    }

    protected async Task<string> SetEditable(bool editable)
    {
        AddressStrValue = await JSRuntime.InvokeAsync<string>(
            JsH.Get(JsH.TextBoxWrapperSetEditable),
            UuidStr,
            CssClassH.AddressBar.CssClsSel(),
            CssClassH.AddressBarReadonly.CssClsSel(),
            editable);

        return AddressStrValue;
    }

    protected async Task<string> SubmitAddress(EventArgs args)
    {
        await SetEditable(false);

        if (OnSubmitAddress != null)
        {
            var eventArgs = new TextEventArgsWrapper(args, InitialAddressStrValue);
            await OnSubmitAddress.Invoke(eventArgs);
        }

        return AddressStrValue;
    }
}
