@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using System.Web;

@inherits ComponentCoreBase;
@inject IJSRuntime JSRuntime;

<div id="@UuidStr" class="trmrk-address-bar-container">
    <IconButton CssClass="oi oi-arrow-circle-left" Title="Go Back" OnMouseUp=@OnGoBackMouseUpAsyncEventHandler></IconButton>
    <IconButton CssClass="oi oi-arrow-circle-top" Title="Go Up" OnMouseUp=@OnGoUpMouseUpAsyncEventHandler></IconButton>

    <IconButton CssClass="oi oi-arrow-circle-right" Title="Go Forward" OnMouseUp=@OnGoForwardMouseUpAsyncEventHandler></IconButton>
    <input type="text" value="@AddressStrValueCore" class="trmrk-address-bar trmrk-hidden" @onfocus=@OnAddressBarFocusAsync @onkeydown=@OnAddressBarKeyDownAsyncEventHandler />
    <input type="text" readonly value="@AddressStrValueCore" class="trmrk-address-bar-readonly" @onclick=@OnAddressBarReadonlyClickAsyncEventHandler></input>
    
    <IconButton CssClass="oi oi-arrow-circle-right" Title="Go to address" OnMouseUp=@OnGoToAddressMouseUpAsyncEventHandler></IconButton>
    <IconButton CssClass="oi oi-reload" Title="Reload" OnMouseUp=@OnReloadMouseUpAsyncEventHandler></IconButton>
</div>

@code {
    [Parameter]
    public string AddressStrValue
    {
        get => HttpUtility.HtmlDecode(AddressStrValueCore);
        set => AddressStrValueCore = HttpUtility.HtmlAttributeEncode(value);
    }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoBackClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoUpClick { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnGoForwardClick { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnSubmitAddress { get; set; }

    [Parameter]
    public Func<MouseEventArgs, Task> OnReloadClick { get; set; }

    protected string  AddressStrValueCore { get; set; }

    protected async Task OnAddressBarFocusAsync(FocusEventArgs args)
    {
        await JSRuntime.InvokeAsync<string>(
            JsH.Get(JsH.SelectDomEl), UuidStr, ".trmrk-address-bar");
    }

    protected async Task OnGoBackMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton() && OnGoBackClick != null)
        {
            await OnGoBackClick(args);
        }
    }

    protected async Task OnGoUpMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton() && OnGoUpClick != null)
        {
            await OnGoUpClick(args);
        }
    }

    protected async Task OnGoForwardMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton() && OnGoForwardClick != null)
        {
            await OnGoForwardClick(args);
        }
    }

    protected async Task OnGoToAddressMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton())
        {
            await SubmitAddress(args);
        }
    }

    protected async Task OnReloadMouseUpAsyncEventHandler(MouseEventArgs args)
    {
        if (args.Button.IsLeftMouseButton() && OnReloadClick != null)
        {
            await OnReloadClick(args);
        }
    }

    protected async Task OnAddressBarReadonlyClickAsyncEventHandler(MouseEventArgs args)
    {
        await SetEditable(true);
    }

    protected async Task OnAddressBarKeyDownAsyncEventHandler(KeyboardEventArgs args)
    {
        if (args.Code.KeyCodeIsEnter())
        {
            await SubmitAddress(args);
        }
    }

    protected async Task<string> SetEditable(bool editable)
    {
        AddressStrValue = await JSRuntime.InvokeAsync<string>(
            JsH.Get(JsH.TextBoxWrapperSetEditable),
            UuidStr,
            ".trmrk-address-bar",
            ".trmrk-address-bar-readonly",
            editable);

        return AddressStrValue;
    }

    protected async Task<string> SubmitAddress(EventArgs args)
    {
        await SetEditable(false);

        if (OnSubmitAddress != null)
        {
            var eventArgs = new TextEventArgsWrapper(args, AddressStrValue);
            await OnSubmitAddress.Invoke(eventArgs);
        }

        return AddressStrValue;
    }
}
