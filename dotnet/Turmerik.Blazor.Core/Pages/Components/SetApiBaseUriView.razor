@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.Core.Components
@using Turmerik.AspNetCore.Services;
@using Turmerik.Core.Helpers;

@inject IJSRuntime jsRuntime;

<div class="@CssClassH.SetApiBaseUriView @CssClassH.Opaque">
    <h5>Set api base uri for</h5>
    <p>
        <pre>
            @ViewModel.ApiKey
        </pre>
    </p>

    <TrmrkTextBox
        IsEditingEnabled="true"
        TextValue=@ApiBaseUri
        OnSubmitTextBox=OnSubmitValue>
    </TrmrkTextBox>

    <div class="@CssClassH.ErrorBlock">
        @ValidationErrorMessage
    </div>

    <button
        type="button"
        class="btn btn-dark @CssClassH.Btn"
        @onmouseup=@OnSaveBtnClickAsync
        disabled=@IsEditing>
        Save
    </button>
</div>

@code {
    [Parameter]
    public SetApiBaseUriViewModel ViewModel { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnApiBaseUriSet { get; set; }

    private string ApiBaseUri { get; set; }

    private bool IsEditing { get; set; }
    private string ValidationErrorMessage { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ApiBaseUri = ViewModel.ApiBaseUri;
    }

    private async Task OnSubmitValue(TextEventArgsWrapper args)
    {
        if (ValidateValue(args.Value))
        {
            IsEditing = false;
        }
    }

    private async Task OnSaveBtnClickAsync(MouseEventArgs args)
    {
        if (!IsEditing && ValidationErrorMessage == null && args.Button.IsLeftMouseButton())
        {
            var textArgs = new TextEventArgsWrapper(args, ApiBaseUri);
            await TrySubmitValueAsync(textArgs);
        }
    }

    private async Task TrySubmitValueAsync(TextEventArgsWrapper args)
    {
        if (ValidateValue(args.Value))
        {
            await jsRuntime.InvokeVoidAsync(
                TrmrkJsH.Get(TrmrkJsH.Api.AddBaseUri),
                ViewModel.ApiKey,
                ApiBaseUri);

            await OnApiBaseUriSet.InvokeAsyncIfReq(args);
        }
    }

    private bool ValidateValue(string value)
    {
        bool isValid = true;
        ApiBaseUri = value;

        try
        {
            ValidationErrorMessage = null;
            var uri = new Uri(value);

            if (!uri.IsAbsoluteUri)
            {
                isValid = false;
                ValidationErrorMessage = "Api base uri must be an absolute https uri (must begin with https://)";
            }
        }
        catch (Exception exc)
        {
            isValid = false;
            ValidationErrorMessage = $"Invalid api base uri: {exc.Message}";
        }

        StateHasChanged();
        return isValid;
    }
}
