@using Microsoft.JSInterop
@using Newtonsoft.Json
@using Turmerik.AspNetCore.Infrastructure
@using Turmerik.AspNetCore.Services
@using Turmerik.AspNetCore.Settings
@using Turmerik.Core.Components
@using Turmerik.Core.Data
@using Turmerik.Core.Helpers;
@using Turmerik.NetCore.Services

@inherits ComponentCoreBase
@typeparam DataType

@inject IJSRuntime jsRuntime;
@inject IMainLayoutService mainLayoutService
@inject ITrmrkAppSettings appSettings;

@code {
    [Parameter]
    public string ApiKey { get; set; }

    [Parameter]
    public string ApiRelUri { get; set; }

    [Parameter]
    public Func<ApiResponseWrapper<DataType>, Task> OnApiResponse { get; set; }

    private object RequestData { get; set; }

    public async Task CallApiAsync(object requestData)
    {
        mainLayoutService.EnableUIBlockingOverlay();

        RequestData = requestData;
        var response = await CallApiCoreAsync(null);

        /* var response = new ApiResponseWrapper<DataType>
        {
            ApiBaseUriNotSet = true
        }; */

        if (response.ApiBaseUriNotSet)
        {
            Action ubsubscribeAction = null;

            Func<TextEventArgsWrapper, Task> onApiBaseUriSet = async args =>
            {
                ubsubscribeAction();
                mainLayoutService.SetApiBaseUriView(null, true);

                response = await CallApiCoreAsync(true);
            };

            ubsubscribeAction = () =>
            {
                mainLayoutService.OnApiBaseUriSet -= onApiBaseUriSet;
            };

            mainLayoutService.OnApiBaseUriSet += onApiBaseUriSet;

            mainLayoutService.SetApiBaseUriView(
                new SetApiBaseUriViewModel
            {
                ApiKey = ApiKey
            });
        }
    }

    protected async override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
    }

    private async Task<ApiResponseWrapper<DataType>> CallApiCoreAsync(bool? apiBaseUriSet)
    {
        var apiResponse = new ApiResponseWrapper<DataType>();

        try
        {
            var paramsList = new List<string>
            {
                ApiKey,
                ApiRelUri
            };

            string json = null;
            var data = RequestData;

            if (data != null)
            {
                json = JsonConvert.SerializeObject(data);
                paramsList.Add(json);
            }

            apiResponse.Response = await jsRuntime.InvokeAsync<ApiResponse<DataType>>(
                TrmrkJsH.Get(TrmrkJsH.Api.FetchPost),
                paramsList.ToArray());

            apiResponse.Success = true;
        }
        catch (Exception exc)
        {
            apiResponse.Exception = exc;
        }

        if (apiResponse.Success)
        {
            mainLayoutService.DisableUIBlockingOverlay();
            await OnApiResponse.InvokeAsyncIfReq(apiResponse);
        }
        else if (!apiResponse.ApiBaseUriNotSet || apiBaseUriSet == true)
        {
            mainLayoutService.SetError(
                new ErrorViewModel(
                    apiResponse.Error ?? "An unhandled error ocurred",
                    apiResponse.Exception,
                    appSettings.IsDevMode));
        }

        return apiResponse;
    }
}
