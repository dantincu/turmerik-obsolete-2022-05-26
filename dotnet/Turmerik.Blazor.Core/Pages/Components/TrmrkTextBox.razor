@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure

@inherits ComponentCoreBase

@inject IJSRuntime JSRuntime;

<div id="@UuidStr" class="@CssClassH.TextboxWrapper @ComponentCssClass">
    @if (IsEditingText)
    {
        <span class="oi oi-arrow-left" @onmouseup=OnCancelTextboxBtnClickAsync></span>
    }
    
    <input type="text" value="@EditableTextValue" class="@CssClassH.Textbox @CssClassH.Hidden" @onfocus=@OnTextboxFocusAsync @onkeydown=@OnTextboxKeyDownAsync />
    <input type="text" readonly value="@TextValue" class="@CssClassH.TextboxReadonly" @onclick=@OnTextboxReadonlyClickAsync />

    @if (IsEditingText)
    {
        <span class="oi oi-x" @onmouseup=OnClearTextboxBtnClickAsync></span>
    }
</div>

@code {
    [Parameter]
    public string ComponentCssClass { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnEnterTextBox { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnSubmitTextBox { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnCancelTextBox { get; set; }

    [Parameter]
    public bool IsEditingText
    {
        get => IsEditingTextCore;

        set
        {
            SetEditable(value);
        }
    }

    private bool IsEditingTextCore { get; set; }

    private string EditableTextValue { get; set; }

    private async Task OnCancelTextboxBtnClickAsync(MouseEventArgs args)
    {
        await SetEditable(false, true);

        await OnCancelTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }

    private async Task OnClearTextboxBtnClickAsync(MouseEventArgs args)
    {
        EditableTextValue = string.Empty;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync(
            TrmrkJsH.Get(TrmrkJsH.SetDomElValue),
            UuidStr,
            CssClassH.Textbox.CssClsSel(),
            EditableTextValue);
    }

    private async Task OnTextboxFocusAsync(FocusEventArgs args)
    {
        await JSRuntime.InvokeAsync<string>(
            TrmrkJsH.Get(TrmrkJsH.SelectDomEl),
            UuidStr,
            CssClassH.Textbox.CssClsSel());
    }

    private async Task OnTextboxKeyDownAsync(KeyboardEventArgs args)
    {
        switch (args.Code)
        {
            case KeyboardKeyCodes.ENTER:
                await SubmitTextbox(args);
                break;
            case KeyboardKeyCodes.ESCAPE:
                await CancelTextbox(args);
                break;
        }
    }

    private async Task OnTextboxReadonlyClickAsync(MouseEventArgs args)
    {
        await SetEditable(true);

        await OnEnterTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args,
            args.Button.IsLeftMouseButton());
    }

    private async Task SetEditable(bool editable, bool revertChanges = false)
    {
        await SetEditableCore(editable, revertChanges);
        IsEditingTextCore = editable;
    }

    private async Task SetEditableCore(bool editable, bool revertChanges = false)
    {
        string editableTextValue = await JSRuntime.InvokeAsync<string>(
            TrmrkJsH.Get(TrmrkJsH.TextBoxWrapperSetEditable),
            UuidStr,
            CssClassH.Textbox.CssClsSel(),
            CssClassH.TextboxReadonly.CssClsSel(),
            editable,
            revertChanges);
            
        if (editable)
        {
            EditableTextValue = TextValue;
        }
        else
        {
            EditableTextValue = editableTextValue;
        }

        StateHasChanged();
    }

    private async Task SubmitTextbox(EventArgs args)
    {
        await SetEditable(false);
        TextValue = EditableTextValue;
        
        await OnSubmitTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }

    private async Task CancelTextbox(EventArgs args)
    {
        await SetEditable(false, true);
        
        await OnCancelTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }
}
