@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Turmerik.AspNetCore.Infrastructure

@inherits ComponentCoreBase

@inject IJSRuntime JSRuntime;

<div id="@UuidStr" class="@CssClassH.TextboxWrapper @ComponentCssClass">
    @if (IsEditing)
    {
        <span class="oi oi-arrow-circle-left" @onmouseup=OnCancelTextboxBtnClickAsync></span>
    }
    
    <input type="text" value="@EditableTextValue" class="@CssClassH.Textbox @EditableTextboxCssClass" @onfocus=@OnTextboxFocusAsync @onkeydown=@OnTextboxKeyDownAsync />
    <input type="text" readonly value="@TextValue" class="@CssClassH.TextboxReadonly @ReadonlyTextboxCssClass" @onclick=@OnTextboxReadonlyClickAsync />

    @if (IsEditing)
    {
        <span class="oi oi-x" @onmouseup=OnClearTextboxBtnClickAsync></span>
        <span class="oi oi-arrow-circle-right" @onmouseup=SubmitTextbox></span>
    }
    
    <FadingTooltipIconButton
        CssClass="oi oi-clipboard"
        OnClick=CopyTextToClipboardAsync
        ClickMessage="Copied">
    </FadingTooltipIconButton>
</div>

@code {
    [Parameter]
    public string ComponentCssClass { get; set; }

    [Parameter]
    public string TextValue { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnEnterTextBox { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnSubmitTextBox { get; set; }

    [Parameter]
    public Func<TextEventArgsWrapper, Task> OnCancelTextBox { get; set; }

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public bool IsEditingEnabled { get; set; }

    private string EditableTextValue { get; set; }

    private static readonly object syncRoot = new object();
    private volatile int isStartingEditing;

    private string ReadonlyTextboxCssClass => IsEditing ? CssClassH.Hidden : string.Empty;
    private string EditableTextboxCssClass => IsEditing ? string.Empty : CssClassH.Hidden;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsEditing)
        {
            bool selectTextBox = false;

            lock (syncRoot)
            {
                selectTextBox = Interlocked.CompareExchange(ref isStartingEditing, 0, 1) == 1;
            }

            if (selectTextBox)
            {
                await SelectEditableTextBoxAsync();
            }
        }
    }

    private async Task OnCancelTextboxBtnClickAsync(MouseEventArgs args)
    {
        EditableTextValue = TextValue;
        IsEditing = false;

        await OnCancelTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }

    private async Task OnClearTextboxBtnClickAsync(MouseEventArgs args)
    {
        EditableTextValue = string.Empty;
    }

    private async Task OnTextboxFocusAsync(FocusEventArgs args)
    {
        await SelectEditableTextBoxAsync();
    }

    private async Task OnTextboxKeyDownAsync(KeyboardEventArgs args)
    {
        switch (args.Code)
        {
            case KeyboardKeyCodes.ENTER:
                await SubmitTextbox(args);
                break;
            case KeyboardKeyCodes.ESCAPE:
                await CancelTextbox(args);
                break;
        }
    }

    private async Task OnTextboxReadonlyClickAsync(MouseEventArgs args)
    {
        if (IsEditingEnabled)
        {
            isStartingEditing = 1;

            EditableTextValue = TextValue;
            IsEditing = true;

            await OnEnterTextBox.InvokeTextEventAsyncIfReq(
                TextValue,
                args,
                args.Button.IsLeftMouseButton());
        }
    }

    private async Task SubmitTextbox(EventArgs args)
    {
        EditableTextValue = await JSRuntime.InvokeAsync<string>(
            TrmrkJsH.Get(TrmrkJsH.GetDomElValue),
            UuidStr, CssClassH.Textbox.CssClsSel());

        TextValue = EditableTextValue;
        IsEditing = false;

        await OnSubmitTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }

    private async Task CancelTextbox(EventArgs args)
    {
        EditableTextValue = TextValue;
        IsEditing = true;

        await OnCancelTextBox.InvokeTextEventAsyncIfReq(
            TextValue,
            args);
    }

    private async Task SelectEditableTextBoxAsync()
    {
        await JSRuntime.InvokeAsync<string>(
            TrmrkJsH.Get(TrmrkJsH.SelectDomEl),
            UuidStr,
            CssClassH.Textbox.CssClsSel());
    }

    private async Task CopyTextToClipboardAsync(MouseEventArgs args)
    {
        if (IsEditing)
        {
            await JSRuntime.InvokeAsync<string>(
                TrmrkJsH.Get(TrmrkJsH.SelectDomEl),
                UuidStr,
                CssClassH.Textbox.CssClsSel(),
                true);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync(
                TrmrkJsH.Get(TrmrkJsH.WriteToClipboardAsync),
                TextValue);
        }
    }
}
